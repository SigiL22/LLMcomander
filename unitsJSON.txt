Ниже приведено обновлённое описание итогового JSON с дополнительным разъяснением по полю `"r"`, которое используется для описания роли юнита в технике.

---

## Общая структура JSON

Итоговый JSON представляет собой объект с единственным ключом:

- **`"sides"`** – объект, где каждый ключ – это название стороны (например, `"OPFOR"`, `"BLUFOR"`, `"Independent"`, `"CIV"`), а значение – массив объектов-групп, принадлежащих данной стороне.

Пример:
```json
{
  "sides": {
    "OPFOR": [ ... ],
    "BLUFOR": [ ... ],
	"Independent": [ ... ],
	"CIV": [ ... ]
  }
}
```

---

## Структура объекта группы

Каждая группа описывается объектом со следующими ключами:

- **`"n"` (name):**  
  Имя группы, получаемое через `groupId _group`.  
  *Пример:* `"Alpha 1-1"`

- **`"c"` (commander):**  
  Имя командира группы – результат `name leader _group`.  
  *Пример:* `"CommanderName"`

- **`"p"` (position):**  
  Округлённые координаты позиции командира группы (результат `getPosASL _leader` с округлением).  
  *Пример:* `[1561, 2242, 7]`

- **`"co"` (count):**  
  Общее число юнитов в группе – результат `count units _group`.  
  *Пример:* `4`

- **`"b"` (behaviour):**  
  Текущее поведение группы, получаемое через `combatBehaviour _group`. Возможные значения: `"CARELESS"`, `"SAFE"`, `"AWARE"`, `"COMBAT"`, `"STEALTH"`.  
  *Пример:* `"COMBAT"`

- **`"u"` (units):**  
  Массив объектов, описывающих каждого юнита группы.

- **`"v"` (vehicles):**  
  Массив агрегированных объектов техники, используемой в группе. Для каждой уникальной техники (по netId) создаётся одна запись с агрегированными характеристиками.

---

## Структура объекта юнита (в массиве `"u"`)

Каждый юнит описывается объектом, содержащим следующие ключи:

- **`"n"` (name):**  
  Имя юнита – результат `name _unit`.  
  *Пример:* `"Лукас Смит"`

- **`"t"` (type):**  
  Тип юнита – результат `typeOf _unit`.  
  *Пример:* `"rhsusf_army_ucp_crewman"`
  
- **`"p"` (position):**  
  Округлённые координаты позиции юнита (результат `getPosASL _unit` с округлением).  
  *Пример:* `[1565, 2241, 3]`

- **`"pw"` (primary weapon):**  
  Основное оружие юнита – `primaryWeapon _unit`.  
  *Пример:* `"rhs_weap_m4_carryhandle"`

- **`"sw"` (secondary weapon):**  
  Вторичное оружие юнита – `secondaryWeapon _unit`.  
  *Пример:* `""` (если отсутствует)

- **`"h"` (health):**  
  Здоровье юнита, вычисляемое как `1 - damage _unit`, округлённое до двух знаков.  
  *Пример:* `"1.00"`

- **`"sk"` (skill):**  
  Навык (скилл) юнита – `skill _unit`, округлённый до двух знаков.  
  *Пример:* `"0.50"`

- **`"m"` (morale):**  
  Мораль юнита – `morale _unit`, округлённая до двух знаков.  
  *Пример:* `"0.80"`

- **`"f"` (fatigue):**  
  Усталость юнита – `getFatigue _unit`, округлённая до двух знаков.  
  *Пример:* `"0.00"`

- **`"v"` (vehicle info):**  
  Если юнит находится в технике (то есть `vehicle _unit != _unit`), то в его записи добавляется поле `"v"`, которое представляет собой объект с двумя ключами:  
  - **`"id"`** – идентификатор техники (netId, преобразованный в строку),  
  - **`"r"`** – роль юнита в технике, возвращаемая функцией `assignedVehicleRole _unit`.  
    Эта функция может возвращать значение в виде массива, например:  
    - `["turret", [0]]` – означает, что юнит занимает первый туррель (обычно стрелок), 
	- `["turret", [1]]` –  означает вторую туррель,
	- `["turret", [0,0]]` –  означает первую туррель, первой туррели
    - `["driver"]` – означает, что юнит занимает водительское место.  
  *Пример:*  
  ```json
  "v": {
    "id": "0:1033474",
    "r": ["turret", [0]]
  }
  ```
  Или, если функция возвращает простую строку, то просто:  
  ```json
  "v": {
    "id": "0:1033474",
    "r": ["driver"]
  }
  ```

---

## Структура агрегированного объекта техники (в массиве `"v"` группы)

Каждая агрегированная запись техники формируется для каждого уникального транспортного средства (определяемого по netId) и содержит:

- **`"c"` (count):**  
  Количество юнитов в группе, использующих данное транспортное средство.  
  *Пример:* `3`

- **`"f"` (fuel):**  
  Текущий уровень топлива техники – результат `fuel _veh`, округлённый до двух знаков.  
  *Пример:* `"1.00"`
  
 - **`"p"` (position):**  
  Округлённые координаты позиции техники (результат `getPosASL _veh` с округлением).  
  *Пример:* `[1565, 2241, 3]`

- **`"h"` (health):**  
  Здоровье техники, вычисляемое как `1 - damage _veh`, округлённое до двух знаков.  
  *Пример:* `"1.00"`

- **`"id"` (netId):**  
  Идентификатор транспортного средства, преобразованный в строку (например, `"0:1033474"`).  
  *Пример:* `"0:1033474"`

- **`"t"` (type):**  
  Тип техники – результат `typeOf _veh`.  
  *Пример:* `"RHS_M2A2_wd"`

- **`"vn"` (vehicle name):**  
  Отображаемое название техники, полученное из конфигурации (через `getText (configFile >> "CfgVehicles" >> (typeOf _veh) >> "displayName")`).  
  *Пример:* `"M2A2ODS"`

---

## Пример итогового JSON

```json
{
  "sides": {
    "OPFOR": [
      {
        "n": "Alpha 1-1",
        "c": "Commander1",
        "p": [1561,2242,7],
        "co": 4,
        "b": "COMBAT",
        "u": [
          {
            "n": "Лукас Смит",
            "t": "rhsusf_army_ucp_crewman",
            "pw": "rhs_weap_m4_carryhandle",
			"p": [8102, 3544, 39],
            "sw": "",
            "h": "1.00",
            "sk": "0.50",
            "m": "0.80",
            "f": "0.00",
            "v": {
              "id": "0:1033474",
              "r": ["turret", [0]]
            }
          },
          {
            "n": "Иван Петров",
            "t": "rhsusf_army_ucp_crewman",
            "pw": "rhs_weap_m4_carryhandle",
			"p": [8117, 3532, 35],
            "sw": "",
            "h": "1.00",
            "sk": "0.50",
            "m": "0.80",
            "f": "0.00",
            "v": {
              "id": "0:1033474",
              "r": ["driver"]
            }
          }
        ],
        "v": [
          {
            "c": 3,
            "f": "1.00",
            "h": "1.00",
            "id": "0:1033474",
			"p": [8102, 3544, 37],
            "t": "RHS_M2A2_wd",
            "vn": "M2A2ODS"
          }
        ]
      }
    ],
    "BLUFOR": [
      {
        "n": "Alpha 1-2",
        "c": "Commander2",
        "p": [1553,2237,6],
        "co": 2,
        "b": "DEFENSIVE",
        "u": [
          {
            "n": "Сергей Иванов",
            "t": "rhsusf_army_ucp_crewman",
            "pw": "rhs_weap_m4_carryhandle",
			"p": [8082, 3456, 21],
            "sw": "",
            "h": "1.00",
            "sk": "0.60",
            "m": "0.80",
            "f": "0.00"
            // Юнит не находится в технике, поле "v" отсутствует.
          }
        ],
        "v": [
          {
            "c": 2,
            "f": "0.90",
            "h": "0.95",
            "id": "0:1033483",
			"p": [8460, 2917, 6],
            "t": "RHS_M2A2_wd",
            "vn": "M2A2ODS"
          }
        ]
      }
    ]
  }
}
```

---

## Дополнительные замечания

- **Combat Behaviour:**  
  Функция `combatBehaviour _group` возвращает одну из следующих строк: `"CARELESS"`, `"SAFE"`, `"AWARE"`, `"COMBAT"`, `"STEALTH"`.

- **Vehicle Role:**  
  Функция `assignedVehicleRole _unit` может возвращать роль в виде массива, например:
  - `["turret", [0]]` – указывает, что юнит занимает первую туррель (обычно стрелок),
  - `[["driver"]]` – указывает, что юнит занимает водительское место.
  
  В JSON в поле `"v"` для юнита эта информация сохраняется как есть (то есть, если возвращается массив, он сохраняется в JSON; если строка – сохраняется строка).

- **NetId техники:**  
  Для идентификации техники используется функция `netId _veh`, результат которой преобразуется в строку с помощью `format ["%1", netId _veh]`.

- **Агрегация техники:**  
  Если несколько юнитов в группе находятся в одном и том же транспортном средстве, агрегированная запись по технике добавляется только один раз (с указанием количества юнитов в поле `"c"`).

Это обновленное описание отражает текущую структуру JSON, полученную вашим скриптом, и объясняет, откуда берутся значения и какие возможны варианты для поля `"r"` в объектах техники. Если потребуется ещё доработка или уточнения, дайте знать.